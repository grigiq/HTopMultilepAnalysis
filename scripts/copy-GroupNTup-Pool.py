#!/usr/bin/env python

""" copy-GroupNTup-Pool.py: parallelise xrdcp copy via multiprocessing.Pool """

__author__     = "Marco Milesi"
__email__      = "marco.milesi@cern.ch"
__maintainer__ = "Marco Milesi"

import glob, os, sys, subprocess, shutil, argparse

import multiprocessing

parser = argparse.ArgumentParser(description="parallelise xrdcp copy via multiprocessing.Pool")

sample_types = ["Data","Nominal","FastSim","Nominal_PLICFT","FastSim_PLICFT"]

parser.add_argument("sample_type", metavar="sample_type",type=str,
                    help="The sample type. Choose any of: {0}".format(sample_types))
parser.add_argument("--prod_ID", dest="prod_ID", action="store", default="25ns_v29/01", type=str,
                    help="The NTup production tag, e.g. 25ns_v19, 25ns_v24/02, ...  (default: prod_ID=25ns_v29/01)")

args = parser.parse_args()

def listchunks(l, n):
    n = max(1, n)
    return [l[i:i + n] for i in range(0, len(l), n)]

def copy(sample):
    cmd = sample
    subprocess.call(cmd,shell=True)

if __name__ == '__main__':

    username = "mmilesi"

    version     = args.prod_ID
    sample_type = args.sample_type

    basedir = "/coepp/cephfs/mel/mmilesi/ttH/GroupNTup/" + version + "/" + sample_type

    copylist = []

    if sample_type == "Data":

        # All data runs for 2015+2016

	copylist.extend([
276262,
276329,
276336,
276416,
276511,
276689,
276778,
276790,
276952,
276954,
278880,
278912,
278968,
279169,
279259,
279279,
279284,
279345,
279515,
279598,
279685,
279813,
279867,
279928,
279932,
279984,
280231,
280273,
280319,
280368,
280423,
280464,
280500,
280520,
280614,
280673,
280753,
280853,
280862,
280950,
280977,
281070,
281074,
281075,
281317,
281385,
281411,
282625,
282631,
282712,
282784,
282992,
283074,
283155,
283270,
283429,
283608,
283780,
284006,
284154,
284213,
284285,
284420,
284427,
284484,
297730,
298595,
298609,
298633,
298687,
298690,
298771,
298773,
298862,
298967,
299055,
299144,
299147,
299184,
299243,
299584,
300279,
300345,
300415,
300418,
300487,
300540,
300571,
300600,
300655,
300687,
300784,
300800,
300863,
300908,
301912,
301918,
301932,
301973,
302053,
302137,
302265,
302269,
302300,
302347,
302380,
302391,
302393,
302737,
302831,
302872,
302919,
302925,
302956,
303007,
303079,
303201,
303208,
303264,
303266,
303291,
303304,
303338,
303421,
303499,
303560,
303638,
303832,
303846,
303892,
303943,
304006,
304008,
304128,
304178,
304198,
304211,
304243,
304308,
304337,
304409,
304431,
304494,
305380,
305543,
305571,
305618,
305671,
305674,
305723,
305727,
305735,
305777,
305811,
305920,
306269,
306278,
306310,
306384,
306419,
306442,
306448,
306451,
307126,
307195,
307259,
307306,
307354,
307358,
307394,
307454,
307514,
307539,
307569,
307601,
307619,
307656,
307710,
307716,
307732,
307861,
307935,
308047,
308084,
309375,
309390,
309440,
309516,
309640,
309674,
309759,
310015,
310247,
310249,
310341,
310370,
310405,
310468,
310473,
310634,
310691,
310738,
310809,
310863,
310872,
310969,
311071,
311170,
311244,
311287,
311321,
311365,
311402,
311473,
311481,
])
    elif sample_type in ["FastSim","FastSim_PLICFT"]:

 	copylist.extend([304014])

    elif sample_type in ["Nominal","Nominal_PLICFT"]:

        # 07/03/17: this list contains the Priority 1 MC samples only

 	copylist.extend([
343365,
343366,
343367,
341998,
342001,
342004,
342284,
342285,
343267,
343270,
343273,
361063,
361064,
361065,
361066,
361067,
361068,
361069,
361070,
361071,
361072,
361073,
361077,
361091,
361092,
361093,
361094,
361095,
361096,
361097,
361620,
361621,
361622,
361623,
361624,
361625,
361626,
361627,
364100,
364101,
364102,
364103,
364104,
364105,
364106,
364107,
364108,
364109,
364110,
364111,
364112,
364113,
364114,
364115,
364116,
364117,
364118,
364119,
364120,
364121,
364122,
364123,
364124,
364125,
364126,
364127,
364128,
364129,
364130,
364131,
364132,
364133,
364134,
364135,
364136,
364137,
364138,
364139,
364140,
364141,
364156,
364157,
364158,
364159,
364160,
364161,
364162,
364163,
364164,
364165,
364166,
364167,
364168,
364169,
364170,
364171,
364172,
364173,
364174,
364175,
364176,
364177,
364178,
364179,
364180,
364181,
364182,
364183,
364184,
364185,
364186,
364187,
364188,
364189,
364190,
364191,
364192,
364193,
364194,
364195,
364196,
364197,
364198,
364199,
364200,
364201,
364202,
364203,
364204,
364205,
364206,
364207,
364208,
364209,
364210,
364211,
364212,
364213,
364214,
364215,
410000,
410011,
410012,
410013,
410014,
410025,
410026,
410050,
410080,
410081,
410082,
410155,
410156,
410157,
410215,
410218,
410219,
410220,
410501,
410502,
410503,
         ])

    else:
        os.sys.exit("Unsupported sample type: {0}. Aborting.".format(sample_type))

    cmdlist = []

    prepend = ( "", "00" )[ ( sample_type == "Data" ) ]

    for sample in copylist:
        cmd = "cd " + basedir + " && mkdir -p " + prepend + str(sample) + " && cd $_ && xrdcp root://eospublic.cern.ch//eos/escience/UniTexas/HSG8/multileptons_ntuple_run2/" + version + "/" + sample_type + "/" + prepend + str(sample) + ".root ."
	cmdlist.append(cmd)

    MAX_PARALLEL = 6

    #print listchunks(cmdlist,MAX_PARALLEL)

    for chunk in listchunks(cmdlist,MAX_PARALLEL):

        if not os.path.exists("/tmp/krb5cc_1016"):
	    print("Please get a Kerberos ticket first:")
	    krb_auth = "kinit " + username + "@CERN.CH"
	    subprocess.call(krb_auth,shell=True)
        subprocess.call("kinit -R",shell=True)

        print("Copying samples: ")
        print("\n".join("{0} - {1}".format(elem[0],elem[1].split()[5]) for elem in enumerate(chunk)))
        p = multiprocessing.Pool(MAX_PARALLEL)
        p.map(copy,chunk)
	p.close()
        p.join()

    os.chdir(basedir)
    print("Transfer finished!")
